/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
// #include <dt-bindings/zmk/mouse.h>S

/ {
    behaviors {
        hml: homewrow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HMLHOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <6 18 30 31 19 7 8 20 32 33 21 9 10 22 34 11 23 35 41 40 39>;
        };

        hmr: homewrow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
        };
    };

    combos {
        compatible = "zmk,combos";

        copy_ {
            bindings = <&kp LC(LS(C))>;
            key-positions = <1 2>;
            layers = <0 1 2>;
        };

        paste_ {
            bindings = <&kp LC(LS(V))>;
            key-positions = <3 4>;
            layers = <0 1 2>;
        };

        caps {
            bindings = <&kp CAPS>;
            key-positions = <17 18>;
            layers = <0 1 2>;
        };

        copy {
            bindings = <&kp RC(C)>;
            key-positions = <25 27>;
            layers = <0 1 2>;
        };

        paste {
            bindings = <&kp RC(V)>;
            key-positions = <25 28>;
            layers = <0 1 2>;
        };

        delete {
            bindings = <&kp DEL>;
            key-positions = <5 4>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        qwerty {
            bindings = <
&kp TAB    &kp Q         &kp W         &kp E        &kp R        &kp T           &kp Y          &kp U        &kp I        &kp O         &kp P            &kp BSPC
&kp ESC    &hml LCTRL A  &hml LSHFT S  &hml LALT D  &hml LGUI F  &kp G           &kp H          &hmr RGUI J  &hmr RALT K  &hmr RSHFT L  &hmr RCTRL SEMI  &kp SQT
&kp LCTRL  &kp Z         &kp X         &kp C        &kp V        &kp B           &kp N          &kp M        &kp COMMA    &kp DOT       &kp FSLH         &lt 4 ENTER
                                       &mo 5        &kp SPACE    &kp LEFT_GUI    &kp RIGHT_GUI  &kp ENTER    &mo 6
            >;
        };

        colemak {
            bindings = <
&trans  &kp Q         &kp W         &kp F        &kp P        &kp G     &kp J   &kp L        &kp U        &kp Y         &kp SEMI      &trans
&trans  &hml LCTRL A  &hml LSHFT R  &hml LALT S  &hml LGUI T  &kp D     &kp H   &hmr RGUI N  &hmr RALT E  &hmr RSHFT I  &hmr RCTRL O  &kp APOS
&trans  &kp Z         &kp X         &kp C        &kp V        &kp B     &kp K   &kp M        &kp COMMA    &kp DOT       &kp FSLH      &trans
                                    &trans       &trans       &trans    &trans  &trans       &trans
            >;
        };

        dvorak {
            bindings = <
&trans  &kp SQT       &kp COMMA     &kp DOT      &kp P        &kp Y     &kp F   &kp G        &kp C        &kp R         &kp L         &trans
&trans  &hml LCTRL A  &hml LSHFT O  &hml LALT E  &hml LGUI U  &kp I     &kp D   &hmr RGUI H  &hmr RALT T  &hmr RSHFT N  &hmr RCTRL S  &kp MINUS
&trans  &kp SEMI      &kp Q         &kp J        &kp K        &kp X     &kp B   &kp M        &kp W        &kp V         &kp Z         &trans
                                    &trans       &trans       &trans    &trans  &trans       &trans
            >;
        };

        mouse_nums {
            bindings = <
&trans  &none  &none  &none        &none        &kp KP_NUM      &kp KP_PLUS      &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_SUBTRACT  &trans
&trans  &none  &none  &none        &none        &kp KP_COMMA    &kp KP_EQUAL     &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_NUMBER_0  &kp KP_DOT
&trans  &none  &none  &kp KP_LPAR  &kp KP_RPAR  &none           &kp KP_MULTIPLY  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_DIVIDE    &trans
                      &trans       &trans       &trans          &kp KP_ENTER     &trans           &trans
            >;
        };

        f-keys {
            bindings = <
&trans  &kp F1   &kp F2   &kp F3   &kp F4   &kp F5     &kp PSCRN        &kp INSERT  &kp HOME    &kp PG_UP     &none         &trans
&trans  &kp F6   &kp F7   &kp F8   &kp F9   &kp F10    &kp PAUSE_BREAK  &kp DELETE  &kp END     &kp PG_DN     &none         &none
&trans  &kp F11  &kp F12  &kp F13  &kp F14  &kp F15    &none            &none       &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP  &trans
                          &trans   &trans   &trans     &trans           &trans      &trans
            >;
        };

        lower {
            bindings = <
&kp GRAVE  &kp N1  &kp N2    &kp N3    &kp N4     &kp N5    &kp N6  &kp N7    &kp N8    &kp N9     &kp N0     &kp BSLH
&trans     &trans  &trans    &kp UP    &trans     &trans    &none   &kp LBKT  &kp RBKT  &kp MINUS  &kp EQUAL  &kp FSLH
&trans     &trans  &kp LEFT  &kp DOWN  &kp RIGHT  &trans    &none   &kp LPAR  &kp RPAR  &kp LT     &kp GT     &trans
                             &trans    &trans     &trans    &trans  &trans    &trans
            >;
        };

        raise {
            bindings = <
&kp TILDE  &kp EXCL  &kp AT_SIGN  &kp HASH  &kp DLLR   &kp PRCNT    &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &trans
&trans     &trans    &trans       &kp UP    &trans     &trans       &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &none
&trans     &trans    &kp LEFT     &kp DOWN  &kp RIGHT  &trans       &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &trans
                                  &trans    &trans     &trans       &trans     &trans     &trans
            >;
        };

        adjust {
            bindings = <
&trans      &none         &none         &none         &none         &none           &none   &none   &none   &none  &none  &trans
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &none   &to 0   &to 1   &to 2  &to 3  &none
&trans      &none         &none         &none         &none         &none           &none   &none   &none   &none  &none  &trans
                                        &trans        &trans        &trans          &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <5 6>;
            then-layer = <7>;
        };
    };
};
